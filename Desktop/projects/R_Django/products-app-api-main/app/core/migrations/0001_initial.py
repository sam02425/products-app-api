# Generated by Django 3.2.14 on 2022-07-13 07:51

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('image', models.ImageField(null=True, upload_to=core.models.product_image_file_path)),
                ('brand', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('aisle', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G')], default='A', max_length=255)),
                ('rack_number', models.IntegerField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7')], default=1)),
                ('size', models.CharField(choices=[('XS', 'Extra Small'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'Extra Large'), ('XXL', 'Double Extra Large')], default='small', max_length=255)),
                ('stock', models.IntegerField(default=0)),
                ('weight', models.DecimalField(decimal_places=2, max_digits=5)),
                ('unit', models.CharField(choices=[('kg', 'Kilograms'), ('lb', 'Pounds'), ('g', 'Grams'), ('oz', 'Ounces'), ('l', 'Liters'), ('ml', 'Milliliters'), ('gal', 'Gallons'), ('qt', 'Quarts'), ('fl oz', 'Fluid Ounces'), ('cup', 'Cups')], default='oz', max_length=20)),
                ('availability', models.CharField(choices=[('In Stock', 'In Stock'), ('Out of Stock', 'Out of Stock'), ('Pre-Order', 'Pre-Order')], default='In Stock', max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=5)),
                ('category', models.CharField(choices=[('Food', 'Food'), ('Drink', 'Drink'), ('Snack', 'Snack'), ('Dessert', 'Dessert'), ('Other', 'Other')], default='Food', max_length=255)),
                ('sub_category', models.CharField(choices=[('Other', 'Other'), ('Baby', 'Baby'), ('Beer, Wine & Spirits', 'Beer, Wine & Spirits'), ('Beverages:  tea, coffee, soda, juice, Kool-Aid, hot chocolate, water, etc.', 'Beverages:  tea, coffee, soda, juice, Kool-Aid, hot chocolate, water, etc.'), ('Bread & Bakery', 'Bread & Bakery'), ('Breakfast & Cereal', 'Breakfast & Cereal'), ('Canned Goods & Soups', 'Canned Goods & Soups'), ('Condiments/Spices & Bake', 'Condiments/Spices & Bake'), ('Cookies, Snacks & Candy', 'Cookies, Snacks & Candy'), ('Dairy, Eggs & Cheese', 'Dairy, Eggs & Cheese'), ('Deli & Signature Cafe', 'Deli & Signature Cafe'), ('Flowers & Plants', 'Flowers & Plants'), ('Frozen Foods', 'Frozen Foods'), ('Produce: Fruits & Vegetables', 'Produce: Fruits & Vegetables'), ('Grains, Pasta & Sides', 'Grains, Pasta & Sides'), ('International Cuisine', 'International Cuisine'), ('Meat & Seafood', 'Meat & Seafood'), ('Miscellaneous: gift cards/wrap, batteries, etc.', 'Miscellaneous: gift cards/wrap, batteries, etc.'), ('Paper Products toilet paper, paper towels, tissues, paper plates/cups, etc.', 'Paper Products: toilet paper, paper towels, tissues, paper plates/cups, etc.'), ('Cleaning Supplies: laundry detergent, dishwashing soap, etc.', 'Cleaning Supplies : laundry detergent, dishwashing soap, etc.'), ('Health & Beauty, Personal Care & Pharmacy: pharmacy items, shampoo, toothpaste', 'Health & Beauty, Personal Care & Pharmacy : pharmacy items, shampoo, toothpaste'), ('Pet Care', 'Pet Care'), ('Pharmacy', 'Pharmacy'), ('Tobacco', 'Tobacco')], default='None', max_length=255)),
                ('manufacturer', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.manufacturer')),
                ('tags', models.ManyToManyField(blank=True, to='core.Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
